library(readr)
day <- read_csv("day.csv")
View(day)
library(readr)
hour <- read_csv("hour.csv")
View(hour)
View(hour)
View(day)
library(readr)
Wholesale_customers_data <- read_csv("Wholesale customers data.csv")
View(Wholesale_customers_data)
install.packages(c("caTools", "e1071"))
dataset = read.csv('Wholesale_costumers_data.csv')
View(Wholesale_customers_data)
View(Wholesale_customers_data)
View(Wholesale_customers_data)
dataset = read.csv('Wholesale_customers_data.csv')
library(readr)
Wholesale_customers_data <- read_csv("Wholesale customers data.csv")
View(Wholesale_customers_data)
View(Wholesale_customers_data)
dataset = dataset[5:18]
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
View(day)
dataset = read.csv('day.csv')
library(readr)
day <- read_csv("day.csv")
View(day)
dataset = dataset[5:18]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$ProductRelated, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-1] = scale(training_set[-1])
test_set[-1] = scale(test_set[-1])
# Fitting Naive Bayes to the Training set
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$ProductRelated)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Encoding the target feature as factor
dataset$instant = factor(dataset$instant, levels = c(2, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$instant, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
test_set = subset(dataset, split == FALSE)
source('/cloud/project/code.r')
source('/cloud/project/code.r')
View(dataset)
dataset = read.csv('dataset.csv')
dataset = dataset[5:18]
View(Wholesale_customers_data)
split = sample.split(dataset$Channel, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-1] = scale(training_set[-1])
test_set[-1] = scale(test_set[-1])
# Fitting Naive Bayes to the Training set
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$ProductRelated)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
View(day)
dataset = read.csv('day.csv')
# Encoding the target feature as factor
dataset$ProductRelated = factor(dataset$ProductRelated, levels = c(2, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
set.seed(123)
split = sample.split(dataset$ProductRelated, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-1] = scale(training_set[-1])
test_set[-1] = scale(test_set[-1])
# Fitting Naive Bayes to the Training set
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$ProductRelated)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
